eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgYnVpbGRfNDoKICAgIGltYWdlOiBub2RlOjQuNC4yCiAgICBjb21tYW5kczoKICAgICAgLSBucG0gLS1sb2dsZXZlbCB3YXJuIGluc3RhbGwgLWcgbnBtQDMuMTAuOAogICAgICAtIG5wbSAtLWxvZ2xldmVsIHdhcm4gaW5zdGFsbAogICAgICAtIG5wbSBydW4gdGVzdDpjaQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFtwdXNoLCBwdWxsX3JlcXVlc3RdCgogIGJ1aWxkXzU6CiAgICBpbWFnZTogbm9kZTo1CiAgICBjb21tYW5kczoKICAgICAgLSBucG0gLS1sb2dsZXZlbCB3YXJuIGluc3RhbGwKICAgICAgLSBucG0gcnVuIHRlc3Q6Y2kKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbcHVzaCwgcHVsbF9yZXF1ZXN0XQoKICBidWlsZF9hcHA6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgYXBwIC4KICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdWxsX3JlcXVlc3QKCiAgYnVpbGRfYXBwOgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IGFwcCAuCiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAoKICBidWlsZF9hY2NlcHRhbmNlOgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC1mIERvY2tlcmZpbGUtYWNjZXB0YW5jZSAtdCBhY2NlcHRhbmNlIC4KICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdWxsX3JlcXVlc3QKCiAgYnVpbGRfYWNjZXB0YW5jZToKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBidWlsZCAtZiBEb2NrZXJmaWxlLWFjY2VwdGFuY2UgLXQgYWNjZXB0YW5jZSAuCiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAoKICB0ZXN0X2FjY2VwdGFuY2U6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgcnVuIC1lIE5PREVfRU5WPWNpIC1kIC0tbmV0IGhvc3QgYXBwCiAgICAgIC0gZG9ja2VyIHJ1biAtLXJtIC0tbmV0IGhvc3QgYWNjZXB0YW5jZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1bGxfcmVxdWVzdAoKICB0ZXN0X2FjY2VwdGFuY2U6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgcnVuIC1lIE5PREVfRU5WPWNpIC1kIC0tbmV0IGhvc3QgYXBwCiAgICAgIC0gZG9ja2VyIHJ1biAtLXJtIC0tbmV0IGhvc3QgYWNjZXB0YW5jZQogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKCiAgaW1hZ2VfdG9fcXVheToKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCt1a3ZpX2NvbXBsYWludHMiIC1wPSR7RE9DS0VSX1BBU1NXT1JEfSBxdWF5LmlvCiAgICAgIC0gZG9ja2VyIHRhZyBhcHAgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3VrdmktY29tcGxhaW50czoke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3VrdmktY29tcGxhaW50czoke0RST05FX0NPTU1JVF9TSEF9CiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAoKICB0cmlnZ2VyX2RlcGxveV90b19kZXY6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2Ryb25lLXRyaWdnZXI6bGF0ZXN0CiAgICBkcm9uZV9zZXJ2ZXI6IGh0dHBzOi8vZHJvbmUuZGlnaXRhbC5ob21lb2ZmaWNlLmdvdi51awogICAgcmVwbzogVUtIb21lT2ZmaWNlL2t1YmUtdWt2aS1jb21wbGFpbnRzCiAgICBicmFuY2g6IG1hc3RlcgogICAgZGVwbG95X3RvOiB1a3ZpLWNvbXBsYWludHMtZGV2CiAgICBwYXJhbXM6IEFQUF9JTUFHRV9UQUc9JHtEUk9ORV9DT01NSVRfU0hBfSxLVUJFX05BTUVTUEFDRT11a3ZpLWNvbXBsYWludHMtZGV2CiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAoKICB0cmlnZ2VyX2RlcGxveV90b19wcmVwcm9kOgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9kcm9uZS10cmlnZ2VyOmxhdGVzdAogICAgZHJvbmVfc2VydmVyOiBodHRwczovL2Ryb25lLmRpZ2l0YWwuaG9tZW9mZmljZS5nb3YudWsKICAgIHJlcG86IFVLSG9tZU9mZmljZS9rdWJlLXVrdmktY29tcGxhaW50cwogICAgYnJhbmNoOiBtYXN0ZXIKICAgIGRlcGxveV90bzogdWt2aS1jb21wbGFpbnRzLXByZXByb2QKICAgIHBhcmFtczogQVBQX0lNQUdFX1RBRz0ke0RST05FX0NPTU1JVF9TSEF9LEtVQkVfTkFNRVNQQUNFPXVrdmktY29tcGxhaW50cy1wcmVwcm9kCiAgICB3aGVuOgogICAgICBldmVudDogdGFnCgpzZXJ2aWNlczoKICByZWRpczoKICAgIGltYWdlOiByZWRpcwogIGRpbmQ6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEtZGluZAogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgY29tbWFuZDoKICAgICAgLSAiLXMiCiAgICAgIC0gIm92ZXJsYXkiCg.mLRbIdLB91GGSpmUIeVGBdIgnsf-1k4g3Y-2FjODFNU